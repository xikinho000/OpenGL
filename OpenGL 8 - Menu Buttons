#include <windows.h>
#include <gl/gl.h>
#include <string.h>

#define btn_start 1
#define btn_stop 2
#define btn_quit 3


/* - This program will create buttons and handle click over it. */
LRESULT CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM);
void EnableOpenGL(HWND hwnd, HDC*, HGLRC*);
void DisableOpenGL(HWND, HDC, HGLRC);

int width, height;
typedef struct{
    char name[20];
    float vert[8];
    BOOL hover;
}TButton;

TButton btn[] = {
    { "start", {0, 0, 100, 0, 100, 30, 0, 30}, FALSE },
    { "stop" , {0,40, 100,40, 100, 70, 0, 70}, FALSE },
    { "quit" , {0,80, 100,80, 100,110, 0,110}, FALSE }
};

int btnCnt = sizeof(btn) / sizeof(btn[0]);

void TButton_Show(TButton btn, float R, float G, float B)
{
    glEnableClientState(GL_VERTEX_ARRAY);
        if(btn.hover) glColor3f(1.0, 0.5, 1.0); // added new in case you need to change color on hover.
        else  glColor3f(R, G, B);
        glVertexPointer(2, GL_FLOAT, 0, btn.vert);
        glDrawArrays(GL_TRIANGLE_FAN, 0, 4);

    glDisableClientState(GL_VERTEX_ARRAY);
}

BOOL PointInButton(int x, int y, TButton btn)
{
    return (x > btn.vert[0]) && (x < btn.vert[4]) &&
           (y > btn.vert[1]) && (y < btn.vert[5]);
}

void ShowMenu()
{
    glPushMatrix();
    glLoadIdentity();
    glOrtho(0, width, height, 0, -1,1);
    float colors[3][3] = {
        { 0.0, 1.0, 0.0},
        { 1.0, 1.0, 0.0},
        { 1.0, 0.0, 0.0},
    };
    for(int i = 0; i<btnCnt; i++){
        TButton_Show(btn[i], colors[i][0], colors[i][1], colors[i][2]);
    }
    glEnd();
    glPopMatrix();
}

void DrawTriangle()
{
    glPushMatrix();
    glBegin(GL_TRIANGLES);
        glColor3f(1,0,0);
        // Point a -> b
        glVertex2f(0.5, 0.5);
        glVertex2f(-0.5, 0.5);
        // Point c -> d
        glColor3f(0,0,1);
        glVertex2f(-0.5, -0.5);
    glEnd();
    glPopMatrix();
}

void CreateTextMenu()
{

}

int WINAPI WinMain(HINSTANCE hInstance,
                   HINSTANCE hPrevInstance,
                   LPSTR lpCmdLine,
                   int nCmdShow)
{
    WNDCLASSEX wcex;
    HWND hwnd;
    HDC hDC;
    HGLRC hRC;
    MSG msg;
    BOOL bQuit = FALSE;
    float theta = 0.0f;

    /* register window class */
    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style = CS_OWNDC;
    wcex.lpfnWndProc = WindowProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
    wcex.lpszMenuName = NULL;
    wcex.lpszClassName = "GLSample";
    wcex.hIconSm = LoadIcon(NULL, IDI_APPLICATION);;


    if (!RegisterClassEx(&wcex))
        return 0;

    /* create main window */
    hwnd = CreateWindowEx(0,
                          "GLSample",
                          "Simple Menu",
                          WS_OVERLAPPEDWINDOW,
                          CW_USEDEFAULT,
                          CW_USEDEFAULT,
                          500,
                          500,
                          NULL,
                          NULL,
                          hInstance,
                          NULL);

    ShowWindow(hwnd, nCmdShow);

    /* enable OpenGL for the window */
    EnableOpenGL(hwnd, &hDC, &hRC);

    /* program main loop */
    while (!bQuit)
    {
        /* check for messages */
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
        {
            /* handle or dispatch messages */
            if (msg.message == WM_QUIT)
            {
                bQuit = TRUE;
            }
            else
            {
                TranslateMessage(&msg);
                DispatchMessage(&msg);
            }
        }
        else
        {
            /* OpenGL animation code goes here */

            glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
            glClear(GL_COLOR_BUFFER_BIT);


            ShowMenu();

            DrawTriangle();
            SwapBuffers(hDC);
            Sleep (1);
        }
    }

    /* shutdown OpenGL */
    DisableOpenGL(hwnd, hDC, hRC);

    /* destroy the window explicitly */
    DestroyWindow(hwnd);

    return msg.wParam;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
        case WM_CLOSE:
            PostQuitMessage(0);
        break;

        case WM_LBUTTONDOWN:
            for(int i =0; i<btnCnt; i++){
                if(PointInButton(LOWORD(lParam), HIWORD(lParam), btn[i])){
                    if(strcmp(btn[i].name, "quit") == 0){
                        PostQuitMessage(0);
                        MessageBox(NULL, "Bye Bye", "Quitting ....", NULL);
                    } else {
                        MessageBox(NULL, btn[i].name, "Quitting ....", NULL);
                    }
                }
            }
        break;
        // - Change the viewport on window resize.
        case WM_SIZE:

            // Method 1
            /*glViewport(0, 0, LOWORD(lParam), HIWORD(lParam));
            // after resize, fix the view perpective - If we dont fix it, it will look stretched.
            glLoadIdentity();
            float k = LOWORD(lParam)/(float)HIWORD(lParam);
            glOrtho(-k,k, -1,1, -1,1);*/

            // Method 2
            width = LOWORD(lParam);
            height = HIWORD(lParam);
            glViewport(0, 0, width, height);
            glLoadIdentity();
            float k = LOWORD(lParam)/(float)HIWORD(lParam);
            glOrtho(-k,k, -1,1, -1,1);

        break;

        case WM_MOUSEMOVE:
            for(int i =0; i<btnCnt; i++){
                btn[i].hover = PointInButton(LOWORD(lParam), HIWORD(lParam), btn[i]);
            }
        break;

        case WM_DESTROY:
            return 0;

        case WM_KEYDOWN:
        {
            switch (wParam)
            {
                case VK_ESCAPE:
                    PostQuitMessage(0);
                break;
            }
        }
        break;

        default:
            return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }

    return 0;
}

void EnableOpenGL(HWND hwnd, HDC* hDC, HGLRC* hRC)
{
    PIXELFORMATDESCRIPTOR pfd;

    int iFormat;

    /* get the device context (DC) */
    *hDC = GetDC(hwnd);

    /* set the pixel format for the DC */
    ZeroMemory(&pfd, sizeof(pfd));

    pfd.nSize = sizeof(pfd);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW |
                  PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 24;
    pfd.cDepthBits = 16;
    pfd.iLayerType = PFD_MAIN_PLANE;

    iFormat = ChoosePixelFormat(*hDC, &pfd);

    SetPixelFormat(*hDC, iFormat, &pfd);

    /* create and enable the render context (RC) */
    *hRC = wglCreateContext(*hDC);

    wglMakeCurrent(*hDC, *hRC);
}

void DisableOpenGL (HWND hwnd, HDC hDC, HGLRC hRC)
{
    wglMakeCurrent(NULL, NULL);
    wglDeleteContext(hRC);
    ReleaseDC(hwnd, hDC);
}

